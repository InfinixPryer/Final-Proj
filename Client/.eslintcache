[{"/Users/ralph/Documents/GitHub/Final-Proj/Client/src/index.js":"1","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/App.js":"2","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/navbar.js":"3","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/productinfo.js":"4","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/productsviewer.js":"5","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/pages/AboutPage.js":"6","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/pages/CheckoutPage .js":"7","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/pages/CartPage.js":"8","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/pages/LandingPage.js":"9","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/pages/ProductsPage.js":"10","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/context/CartContext.js":"11","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/productcard.js":"12","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/addnewproduct.js":"13","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/context/ProductContext.js":"14","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/products.js":"15","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/reducers/reducers.js":"16","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/context/DeviceContext.js":"17"},{"size":270,"mtime":1612422038216,"results":"18","hashOfConfig":"19"},{"size":2735,"mtime":1613628238553,"results":"20","hashOfConfig":"19"},{"size":2523,"mtime":1613628238556,"results":"21","hashOfConfig":"19"},{"size":9605,"mtime":1613628238711,"results":"22","hashOfConfig":"19"},{"size":1330,"mtime":1613628238570,"results":"23","hashOfConfig":"19"},{"size":4249,"mtime":1613628238557,"results":"24","hashOfConfig":"19"},{"size":80,"mtime":1613548359517,"results":"25","hashOfConfig":"19"},{"size":1441,"mtime":1613556489141,"results":"26","hashOfConfig":"19"},{"size":995,"mtime":1613280614381,"results":"27","hashOfConfig":"19"},{"size":2817,"mtime":1613627173694,"results":"28","hashOfConfig":"19"},{"size":411,"mtime":1613559531194,"results":"29","hashOfConfig":"19"},{"size":2325,"mtime":1613628238560,"results":"30","hashOfConfig":"19"},{"size":4123,"mtime":1613628238554,"results":"31","hashOfConfig":"19"},{"size":478,"mtime":1613627173694,"results":"32","hashOfConfig":"19"},{"size":2933,"mtime":1613628238568,"results":"33","hashOfConfig":"19"},{"size":1442,"mtime":1613628238578,"results":"34","hashOfConfig":"19"},{"size":423,"mtime":1613628238555,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"3h62et",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":2,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Users/ralph/Documents/GitHub/Final-Proj/Client/src/index.js",[],["78","79"],"/Users/ralph/Documents/GitHub/Final-Proj/Client/src/App.js",["80"],"/Users/ralph/Documents/GitHub/Final-Proj/Client/src/navbar.js",["81"],"import React, { useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport bag from \"./images/bag.png\";\nimport logo from \"./images/logo.jpg\";\nimport { CartContext } from \"./context/CartContext\";\n\nconst Navbar = () => {\n  const { cart } = useContext(CartContext);\n\n  return (\n    <nav className=\"flex sticky z-50 top-0 h-14 bg-white w-full justify-between font-source shadow-sm\">\n      <img src={logo} alt=\"logo\" id=\"my-logo\" className=\"pl-5 my-auto h-3/6\" />\n      <div className=\" w-4/12 justify-between flex-row flex\">\n        <NavLink\n          to=\"/\"\n          activeStyle={{ color: \"brown\" }}\n          exact\n          className=\"m-auto\"\n        >\n          Home\n        </NavLink>\n        <NavLink\n          to=\"/Products/search=all\"\n          activeStyle={{ color: \"brown\" }}\n          exact\n          className=\"m-auto\"\n        >\n          Products\n        </NavLink>\n        <NavLink\n          to=\"/About\"\n          activeStyle={{ color: \"brown\" }}\n          exact\n          className=\"m-auto\"\n        >\n          About us\n        </NavLink>\n        <span className=\"m-auto flex-row flex w-2/12 justify-between\">\n          <NavLink to=\"/My-Cart\">\n            <div className=\"w-full relative\">\n              <span className=\"absolute w-5 text-sm text-center ml-3 mt-0 rounded-full bg-coffee text-white\">\n                {cart.length ? cart.length : null}\n              </span>\n              <img src={bag} alt=\"cart\" width=\"20px\" className=\" w-6\" />\n            </div>\n          </NavLink>\n          <a href=\"#\" className=\"m-auto\">\n            <img src=\"./as\" alt=\"\" width=\"20px\" className=\" w-6\" />\n          </a>\n        </span>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/productinfo.js",["82","83","84","85","86"],"import React, { useState, useRef, useContext, useEffect } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { CartContext } from \"./context/CartContext\";\nimport { ProductContext } from \"./context/ProductContext\";\n\nexport const ProductInfo = ({ match }) => {\n<<<<<<< Updated upstream\n  const { product_name } = useParams(); // change to match when api is available\n  const _item = products.find((item) => item.productName === product_name);\n\n  const {\n    productImage,\n    type,\n    productName,\n=======\n  const { product_ProductName } = useParams();\n  console.log(product_ProductName); // change to match when api is available\n  const { itemList } = useContext(itemList);\n  const _item = itemList.find(\n    (item) => item.ProductProductName === product_ProductName\n  );\n\n  const {\n    ProductImage,\n    type,\n    ProductName,\n>>>>>>> Stashed changes\n    options,\n    preferences,\n    details,\n  } = _item;\n\n  const high = options.reduce((obj, curr) => Math.max(obj.price, curr.price));\n  const low = options.reduce((obj, curr) => Math.min(obj.price, curr.price));\n  const optionsrange = `${low} - \\u20b1${high}`;\n  const qtyInp = useRef();\n\n  const [display, setDisplay] = useState(0);\n\n  const [choices, setChoice] = useState({\n    selected: \"\",\n    quantity: 1,\n    price: optionsrange,\n    selected_option: 0,\n    selected_preference: \"\",\n  });\n\n  const handleQtySelect = (e) => {\n    const qty = e.target.value;\n    console.log(qty);\n    setChoice({\n      ...choices,\n      quantity: qty,\n      price: choices.selected_option.price * qty,\n    });\n  };\n\n  const handleOptionsSelect = (option) => {\n    qtyInp.current.disabled = false;\n    setChoice({\n      ...choices,\n<<<<<<< Updated upstream\n      selected: productName + \" \" + option.name,\n      price: option.price * choices.quantity,\n=======\n      selected: ProductName + \" \" + weight,\n      price: option * choices.quantity,\n>>>>>>> Stashed changes\n      selected_option: option,\n    });\n  };\n\n  const handlePrefSelect = (e) => {\n    setChoice({\n      ...choices,\n      selected_preference: e.target.value,\n    });\n  };\n\n  const handleDisplayState = (state) => {\n    if (display < productImage.length - 1 && state === \"next\") {\n      setDisplay((prev) => prev + 1);\n    }\n    if (display > 0 && state === \"prev\") {\n      setDisplay((prev) => prev - 1);\n    } else return null;\n  };\n  useEffect(() => {\n    console.log(choices);\n  }, [choices]);\n  /* \n  if (!product) {\n    return (\n      <section className=\"flex w-full h-page overflow-hidden bg-white \">\n        <h1>Sorry that item does not exist!</h1>\n      </section>\n    );\n  } */\n\n  return (\n    <section className=\"flex w-full h-page overflow-hidden bg-white \">\n      <div className=\"absolute font-source text-sm py-1 rounded-br-md pl-12 bg-white /bg-darkbrown\">\n        <Link to=\"/Products/search=all\">{`< Products / `}</Link>\n<<<<<<< Updated upstream\n        {`${productName}`}\n=======\n        {`${ProductName}`}\n>>>>>>> Stashed changes\n      </div>\n      <div className=\" w-6/12 flex flex-wrap  float-left mt-10 ml-10\">\n        <div className=\"block h-96 w-full relative\">\n          <span\n            className=\"p-3 top-40 absolute left-0 cursor-pointer\"\n            onClick={() => handleDisplayState(\"prev\")}\n          >\n            {\"<\"}\n          </span>\n          <img\n<<<<<<< Updated upstream\n            src={productImage[display]}\n            alt={productName}\n            className=\"block m-auto h-96 w-96\"\n          />\n          <span\n            className=\"p-3 absolute bottom-44 right-0 cursor-pointer\"\n            onClick={() => handleDisplayState(\"next\")}\n          >\n=======\n            src={ProductImage[display]}\n            alt={ProductName}\n            className=\"block m-auto h-96 w-96\"\n          />\n          <span className=\"p-3 absolute bottom-44 right-0 cursor-pointer\">\n>>>>>>> Stashed changes\n            {\">\"}\n          </span>\n        </div>\n\n        <div className=\" w-96 mx-auto\">\n<<<<<<< Updated upstream\n          {productImage.map((img, index) => {\n=======\n          {ProductImage.map((img, index) => {\n>>>>>>> Stashed changes\n            return (\n              <div\n                className=\"w-24 mt-1 mr-1 inline-block cursor-pointer border-2 border-white hover:border-darkbrown\"\n                onClick={() => setDisplay(index)}\n<<<<<<< Updated upstream\n                key={img + productName}\n              >\n                <img src={img} alt={productName} key={productName + img} />\n=======\n                key={img + ProductName}\n              >\n                <img src={img} alt={ProductName} key={ProductName + img} />\n>>>>>>> Stashed changes\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      <div className=\"float-right w-5/12 absolute pr-5 h-page right-12 flex .shadow-lg font-work flex-col bg-white p-4\">\n        <h1 className=\" text-2xl font-medium font-poppins pb-1\">\n<<<<<<< Updated upstream\n          {productName.toUpperCase()}\n=======\n          {ProductName.toUpperCase()}\n>>>>>>> Stashed changes\n        </h1>\n        <p>{type.toUpperCase()}</p>\n\n        <p className=\"my-5 font-light w-96 text-sm \">{details}</p>\n\n        <span className=\"my-2 flex-col font-semibold font-poppins flex justify-between\">\n          <p className=\"font-normal my-2\">OPTIONS: </p>\n<<<<<<< Updated upstream\n          <OptionsSpan\n            productName={productName}\n=======\n          <Radiospan\n            ProductName={ProductName}\n            grpProductName=\"optionsOpt\"\n>>>>>>> Stashed changes\n            handleSelect={handleOptionsSelect}\n            entries={options}\n          />\n          <p className=\"font-normal my-2\">BEANS: </p>\n<<<<<<< Updated upstream\n          <PreferenceSpan\n            productName={productName}\n=======\n          <Radiospan\n            ProductName={ProductName}\n            grpProductName=\"prefOpt\"\n>>>>>>> Stashed changes\n            handleSelect={handlePrefSelect}\n            entries={preferences}\n          />\n        </span>\n        <span className=\" flex h-12 justify-between mx-5  border-b\">\n          <input\n            disabled\n            ref={qtyInp}\n            type=\"number\"\n            placeholder=\"1\"\n            min=\"1\"\n            max=\"50\"\n            onChange={(e) => handleQtySelect(e)}\n            className=\"w-20 h-10 \"\n          />\n          <p className=\" text-coffee text-2xl my-auto \">\n            {\"\\u20b1\" + choices.price}\n          </p>\n        </span>\n\n        <div className=\"relative bottom-1\">\n          <AddtoCartBtn choices={choices} />\n        </div>\n      </div>\n    </section>\n  );\n};\n\n<<<<<<< Updated upstream\nconst PreferenceSpan = ({ productName, handleSelect, entries }) => {\n  return (\n    <span className=\"w-full\">\n      {entries.map((entry) => {\n        return (\n          <label className=\"radcon\" key={productName + entry}>\n            <input\n              type=\"radio\"\n              name={productName + \"-bean\"}\n              value={entry}\n              onChange={(e) => {\n                handleSelect(e);\n              }}\n            />\n            <span className=\"border inline-block mb-1 min-w-1/4 text-center border-darkbrown font-normal font-work text-sm rounded px-3 py-2 mx-1 transition-colors\">\n              {entry}\n            </span>\n          </label>\n        );\n      })}\n    </span>\n  );\n};\n\nconst OptionsSpan = ({ productName, handleSelect, entries }) => {\n=======\nconst Radiospan = ({ ProductName, grpProductName, handleSelect, entries }) => {\n>>>>>>> Stashed changes\n  return (\n    <span className=\"w-full\">\n      {entries.map((entry) => {\n        const key = entry.name;\n        const value = entry.price;\n\n        return (\n<<<<<<< Updated upstream\n          <label className=\"radcon\" key={productName + key}>\n            <input\n              type=\"radio\"\n              name={productName + \"-option\"}\n              value={value}\n              onChange={() => {\n                handleSelect(entry);\n=======\n          <label className=\"radcon\" key={ProductName + key}>\n            <input\n              type=\"radio\"\n              ProductName={ProductName + grpProductName}\n              value={value}\n              onChange={() => {\n                grpProductName === \"optionsOpt\"\n                  ? handleSelect(value, key)\n                  : handleSelect(value);\n>>>>>>> Stashed changes\n              }}\n            />\n            <span className=\"border inline-block mb-1 min-w-1/4 text-center border-darkbrown font-normal font-work text-sm rounded px-3 py-2 mx-1 transition-colors\">\n              {key}\n            </span>\n          </label>\n        );\n      })}\n    </span>\n  );\n};\n\nconst AddtoCartBtn = ({ choices }) => {\n  const { dispatch } = useContext(CartContext);\n\n  const handleAdd = (e) => {\n    e.preventDefault();\n    if (choices.selected && choices.selected_preference) {\n      const selectedItem = {\n        id: new Date().getTime().toString(),\n        ProductName: choices.selected,\n        quantity: choices.quantity,\n        price: choices.price,\n        preference: choices.selected_preference,\n      };\n      console.log(selectedItem);\n      dispatch({ type: \"ADD_TO_CART\", payload: selectedItem });\n    }\n  };\n\n  return (\n    <span className=\"flex justify-center h-10\">\n      <button\n        onClick={(e) => {\n          handleAdd(e);\n        }}\n        className=\" w-11/12 mt-3 m-auto text-darkbrown  active:bg-gray-800 flex text-sm justify-center bg-white rounded-md border-darkbrown border py-3 font-poppins btn-focus hover:text-white hover:bg-darkbrown hover:btn-focus-hover \"\n      >\n        ADD TO BAG\n      </button>\n    </span>\n  );\n};\n\nexport default ProductInfo;\n","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/productsviewer.js",["87"],"import React, { useEffect, useState } from \"react\";\nimport ProductCard from \"./productcard.js\";\nimport { Link } from \"react-router-dom\";\n\nconst ProductViewer = ({ toFindItems, failedToFind }) => {\n  useEffect(() => {\n    console.log(window.innerWidth);\n  }, []);\n  if (!toFindItems) {\n    return (\n      <div className=\"flex w-32 justify-around relative\">\n        <span className=\"p-3 rounded-full absolute left-0 animate-bounce bg-gray-400\"></span>\n        <span className=\"p-3 rounded-full absolute  animate-bounce  bg-gray-400\"></span>\n        <span className=\"p-3 rounded-full absolute right-0 animate-bounce bg-gray-400\"></span>\n      </div>\n    );\n  }\n  if (failedToFind) {\n    return (\n      <section className=\"w-full h-page flex overflow-auto float-right px-4\">\n        <h1 className=\"m-auto w-52 h-5\">Sorry that item doesn't exist</h1>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"w-full h-page overflow-auto float-right px-4\">\n      <div className=\"grid grid-container md:grid-cols-3 lg:grid-cols-4 grid-cols-2 gap-x-4 gap-y-6 font-type\">\n        {toFindItems.map((item) => {\n          return (\n            <div key={item.product_id}>\n              <Link to={`/Product=${item.name}`}>\n                <ProductCard {...item} />\n              </Link>\n            </div>\n          );\n        })}\n      </div>\n    </section>\n  );\n};\n\nexport default ProductViewer;\n","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/pages/AboutPage.js",["88","89"],"import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { ProductContext } from \"../context/ProductContext\";\nimport { AddNewItem } from \"../addnewproduct.js\";\n\nconst ManageProducts = () => {\n  const [adding, setadding] = useState(false);\n  const [tableSelectList, setList] = useState([]);\n  const { dispatch, itemList } = useContext(ProductContext);\n  const delSelBtn = useRef();\n\n  const handleAdd = () => {\n    setadding((state) => !state);\n  };\n\n  const handleDelItems = () => {\n    for (let item of tableSelectList) {\n      console.log(item);\n      dispatch({ type: \"DELETE_ITEM\", payload: item });\n    }\n    setList([]);\n  };\n  const handleSelect = (e) => {\n    const sel = e.target;\n    if (sel.checked) {\n      setList((prev) => prev.concat(sel.value));\n    } else setList((prev) => prev.filter((index) => index !== sel.value));\n  };\n\n  useEffect(() => {\n    tableSelectList.length !== 0\n      ? (delSelBtn.current.disabled = false)\n      : (delSelBtn.current.disabled = true);\n  }, [tableSelectList]);\n\n  if (adding) {\n    return (\n      <section className=\"w-full m-0 h-page absolute bg-gray-100\">\n        <div className=\"p-5 rounded-lg bg-white m-2 shadow-md\">\n          <AddNewItem />\n        </div>\n      </section>\n    );\n  }\n  return (\n    <section className=\"w-full h-page m-0 absolute bg-gray-100\">\n      <div className=\"p-5 rounded bg-white m-2 shadow-clean\">\n        <h1 className=\"\">MANAGE PRODUCTS</h1>\n\n        <span className=\"float-right font-poppins my-2 text-md\">\n          <button\n            onClick={() => handleDelItems()}\n            ref={delSelBtn}\n            className=\"text-white w-52  rounded border border-red-500  disabled:bg-red-100 disabled:border-red-100 bg-red-500\"\n          >\n            DELETE SELECTED\n            {tableSelectList.length !== 0 ? (\n              <h1 className=\"inline-block\">: {tableSelectList.length}</h1>\n            ) : null}\n          </button>\n\n          <button onClick={() => handleAdd()}>ADD ITEM</button>\n          <button disabled>SAVE</button>\n        </span>\n        <AdminItemTable itemList={itemList} handleSelect={handleSelect} />\n      </div>\n    </section>\n  );\n};\n\nconst AdminItemTable = ({ itemList, handleSelect }) => {\n  return (\n    <div className=\"w-full h-smpage overflow-scroll border border-gray-100 text-sm \">\n      <table>\n        <thead>\n          <tr className=\" font-poppins text-xs bottom top-0 h-8 bg-black z-10 text-white shadow-lg\">\n            <th>{`\\u2713`}</th>\n            <th>ID</th>\n            <th className=\"w-40\">ITEM NAME</th>\n            <th>OPTIONS</th>\n            <th>TAGS</th>\n            <th>IMAGES</th>\n            <th> </th>\n          </tr>\n        </thead>\n        <tbody>\n          {itemList.map((item) => {\n            return (\n              <TableRow\n                item={item}\n                key={item.product_id}\n                handleSelect={handleSelect}\n              />\n            );\n          })}\n        </tbody>\n        <tfoot></tfoot>\n      </table>\n    </div>\n  );\n};\n\nconst TableRow = ({ item, handleSelect }) => {\n  return (\n    <tr className=\"border-1 bg-white\" key={item.product_id}>\n      <td className=\"m-auto\">\n        <label className=\"w-10 h-20 flex\">\n          <input\n            type=\"checkbox\"\n            className=\"m-auto\"\n            value={item.product_id}\n            onChange={(e) => handleSelect(e)}\n          />\n        </label>\n      </td>\n      <td className=\"p-2\">{item.product_id}</td>\n      <td className=\"w-2/12 p-2\">{item.name}</td>\n      <td className=\"w-3/12\"></td>\n      <td className=\"w-2/12\"></td>\n      <td className=\"w-5/12\">\n        <span className=\"flex w-full h-20\">\n          {item.imgs.map((img) => {\n            return (\n              <img src={img} key={img} className=\"p-1 w-20\" alt={item.name} />\n            );\n          })}\n        </span>\n      </td>\n      <td className=\"\">\n        <button className=\"bg-gray-300 text-white border-none text-sm hover:bg-black font-semibold ml-1 mr-3 rounded-sm\">\n          EDIT\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nconst EditItemSpan = () => {};\n\nconst OrderForm = () => {};\nexport default ManageProducts;\n","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/pages/CheckoutPage .js",[],"/Users/ralph/Documents/GitHub/Final-Proj/Client/src/pages/CartPage.js",[],"/Users/ralph/Documents/GitHub/Final-Proj/Client/src/pages/LandingPage.js",[],"/Users/ralph/Documents/GitHub/Final-Proj/Client/src/pages/ProductsPage.js",["90","91","92"],"import React, { useContext, useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport ProductViewer from \"../productsviewer.js\";\nimport { ProductContext } from \"../context/ProductContext\";\nimport { api } from \"../App.js\";\nimport products from \"../products\";\n\nconst ProductPage = () => {\n  const { itemList, dispatch } = useContext(ProductContext);\n  const [toFindItems, settoFindItems] = useState(itemList);\n  const [failedToFind, setFailed] = useState(false);\n\n  const useQuery = () => {\n    return new URLSearchParams(useLocation().search);\n  };\n  const query = useQuery();\n\n  /*   useEffect(() => {\n    api.get(\"/photos/1\").then((res) => {\n      console.log(res.data);\n      dispatch({ type: \"SET_ITEMS\", payload: res.data });\n    });\n  }, []); */\n\n  const ProductFinder = () => {\n    const [toFind, settofind] = useState(\"\");\n    const tagArray = [\"Single Origins\", \"Feelippine Coffee\", \"baz\"];\n\n    const handleChange = (e) => {\n      settofind(e.target.value);\n    };\n    const handleTagSearch = (tag) => {\n      let arr = [];\n      itemList.filter((obj) => {\n        for (let i of obj.tags) {\n          if (i === tag) {\n            arr.push(obj);\n          }\n        }\n      });\n      settoFindItems(arr);\n      setFailed(false);\n    };\n    const handleSearch = () => {\n      const findName = (obj) => {\n        return obj.name.toLowerCase().includes(toFind.toLowerCase());\n      };\n      const findthis = products.filter(findName);\n      if (findthis.length === 0) {\n        setFailed(true);\n      } else {\n        settoFindItems(findthis);\n        setFailed(false);\n      }\n    };\n\n    return (\n      <section className=\" sm:w-60 pt-7 p-1 font-source flex-col float-left text-sm\">\n        <span className=\"mb-4 mx-auto\">\n          <input\n            type=\"text\"\n            value={toFind}\n            placeholder=\"Find an item..\"\n            className=\"rounded-md w-9/12 border border-gray-200 ml-2\"\n            onChange={(e) => handleChange(e)}\n          />\n          <button\n            className=\"border-none shadow hover:bg-gray-100\"\n            onClick={handleSearch}\n          >\n            s\n          </button>\n        </span>\n        {tagArray.map((tag) => (\n          <Link key={tag} to={`/Products/search?tag=:${tag}`}>\n            <span\n              className=\"p-2 border my-1 w-full rounded opacity-70 hover:border-darkbrown block\"\n              onClick={() => handleTagSearch(tag)}\n            >\n              {tag}\n            </span>\n          </Link>\n        ))}\n      </section>\n    );\n  };\n\n  return (\n    <div className=\" flex w-full bg-palebg\">\n      <ProductFinder />\n      <ProductViewer\n        tag={query.get(\"tag\")}\n        toFindItems={toFindItems}\n        failedToFind={failedToFind}\n      />\n    </div>\n  );\n};\nexport default ProductPage;\n","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/context/CartContext.js",[],"/Users/ralph/Documents/GitHub/Final-Proj/Client/src/productcard.js",[],"/Users/ralph/Documents/GitHub/Final-Proj/Client/src/addnewproduct.js",["93"],"import { useState, useEffect } from \"react\";\n\nconst handleSubmit = (event) => {\n  event.preventDefault();\n  console.log(event.target.value);\n};\n\nexport const AddNewItem = () => {\n  const [newItem, setNewItem] = useState({\n    product_id: \"\",\n    available: false,\n    name: \"\",\n    imgs: [],\n    type: \"\",\n    details: \"\",\n    options: {},\n    preferences: {},\n    tags: [],\n  });\n  const [tag, setTag] = useState(\"\");\n  const [option, setOption] = useState({\n    propName: \"\",\n    propVal: \"\",\n  });\n  const {\n    name,\n    product_id,\n    imgs,\n    type,\n    details,\n    options,\n    preferences,\n    tags,\n  } = newItem;\n\n  const handleChange = (e) => {\n    const data = e.target.value;\n    switch (e.target.id) {\n      case \"product_id\":\n        setNewItem({ ...newItem, product_id: data });\n        break;\n      case \"details\":\n        setNewItem({ ...newItem, details: data });\n        break;\n      case \"name\":\n        setNewItem({ ...newItem, name: data });\n        break;\n      case \"imgs\":\n        setNewItem({ ...newItem, imgs: imgs.concat(data) });\n        break;\n      case \"option\":\n        setOption({ ...option, propName: data });\n        break;\n      case \"option-value\":\n        setOption({ ...option, propVal: data });\n        break;\n      case \"tags\":\n        setTag(data);\n        break;\n      default:\n        break;\n    }\n  };\n  const handleAddOption = () => {\n    const newOption = { ...options, [`${option.propName}`]: option.propVal };\n    setNewItem({ ...newItem, options: newOption });\n    setOption({\n      propName: \"\",\n      propVal: \"\",\n    });\n  };\n  const handleAddTag = () => {\n    if (tag) {\n      setNewItem({ ...newItem, tags: tags.concat(tag) });\n      setTag(\"\");\n    }\n  };\n\n  useEffect(() => {\n    console.log(newItem);\n  }, [newItem]);\n\n  return (\n    <>\n      <div>\n        <h1>Product id: {product_id}</h1>\n        <h1>Name: {name}</h1>\n        <h1>Type: {type}</h1>\n        Tags:\n        <span className=\"flex\">\n          {tags.map((tag) => {\n            return (\n              <h3 className=\"mr-1\" key={tag}>\n                {tag}\n              </h3>\n            );\n          })}\n        </span>\n        <h1>Details: {details}</h1>\n      </div>\n      <form onSubmit={(e) => handleSubmit(e)}>\n        <div className=\"addnew flex flex-col\">\n          <label>\n            Id:\n            <input\n              type=\"text\"\n              id=\"product_id\"\n              value={newItem.product_id}\n              onChange={(e) => handleChange(e)}\n            />\n          </label>\n          <label>\n            Name:\n            <input\n              type=\"text\"\n              id=\"name\"\n              value={newItem.name}\n              onChange={(e) => handleChange(e)}\n            />\n          </label>\n          <label>\n            Option:\n            <input\n              type=\"text\"\n              id=\"option\"\n              value={option.propName}\n              onChange={(e) => {\n                handleChange(e);\n              }}\n            />\n            Value:\n            <input\n              type=\"number\"\n              id=\"option-value\"\n              value={option.propVal}\n              onChange={(e) => {\n                handleChange(e);\n              }}\n            />\n            <button type=\"button\" onClick={() => handleAddOption()}>\n              ADD OPTION\n            </button>\n          </label>\n          <label>\n            Tags:\n            <input\n              type=\"text\"\n              id=\"tags\"\n              value={tag}\n              onChange={(e) => handleChange(e)}\n            />\n            <button type=\"button\" onClick={() => handleAddTag()}>\n              ADD TAG\n            </button>\n          </label>\n\n          <label className=\"flex\">details</label>\n          <textarea\n            type=\"text\"\n            className=\"border w-3/6 h-32\"\n            id=\"details\"\n            value={newItem.details}\n            onChange={(e) => handleChange(e)}\n          />\n          <input\n            type=\"file\"\n            id=\"imgs\"\n            value={newItem.imgs}\n            onChange={(e) => handleChange(e)}\n          />\n        </div>\n        <button type=\"submit\">ADD</button>\n      </form>\n    </>\n  );\n};\n","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/context/ProductContext.js",["94","95"],"import React, { createContext, useReducer } from \"react\";\nimport products from \"../products.js\";\nimport { productsReducer } from \"../reducers/reducers\";\n\nexport const ProductContext = createContext();\n\nconst ProductProvider = ({ children }) => {\n  const [itemList, dispatch] = useReducer(productsReducer, products);\n\n  return (\n    <ProductContext.Provider value={{ itemList, dispatch }}>\n      {children}\n    </ProductContext.Provider>\n  );\n};\n\nexport default ProductProvider;\n","/Users/ralph/Documents/GitHub/Final-Proj/Client/src/products.js",[],"/Users/ralph/Documents/GitHub/Final-Proj/Client/src/reducers/reducers.js",[],"/Users/ralph/Documents/GitHub/Final-Proj/Client/src/context/DeviceContext.js",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":13,"column":8,"nodeType":"102","messageId":"103","endLine":13,"endColumn":21},{"ruleId":"104","severity":1,"message":"105","line":47,"column":11,"nodeType":"106","endLine":47,"endColumn":42},{"ruleId":"100","severity":1,"message":"107","line":4,"column":10,"nodeType":"102","messageId":"103","endLine":4,"endColumn":24},{"ruleId":"108","severity":1,"message":"109","line":9,"column":35,"nodeType":"102","messageId":"110","endLine":9,"endColumn":43},{"ruleId":"100","severity":1,"message":"111","line":19,"column":5,"nodeType":"102","messageId":"103","endLine":19,"endColumn":16},{"ruleId":"112","severity":2,"message":"113","line":122,"column":22,"nodeType":"102","messageId":"114","endLine":122,"endColumn":36},{"ruleId":"112","severity":2,"message":"115","line":129,"column":22,"nodeType":"102","messageId":"114","endLine":129,"endColumn":33},{"ruleId":"100","severity":1,"message":"116","line":1,"column":28,"nodeType":"102","messageId":"103","endLine":1,"endColumn":36},{"ruleId":"100","severity":1,"message":"117","line":137,"column":7,"nodeType":"102","messageId":"103","endLine":137,"endColumn":19},{"ruleId":"100","severity":1,"message":"118","line":139,"column":7,"nodeType":"102","messageId":"103","endLine":139,"endColumn":16},{"ruleId":"100","severity":1,"message":"119","line":5,"column":10,"nodeType":"102","messageId":"103","endLine":5,"endColumn":13},{"ruleId":"120","severity":1,"message":"121","line":23,"column":6,"nodeType":"122","endLine":23,"endColumn":23,"suggestions":"123"},{"ruleId":"124","severity":1,"message":"125","line":45,"column":29,"nodeType":"126","messageId":"127","endLine":45,"endColumn":31},{"ruleId":"100","severity":1,"message":"111","line":32,"column":5,"nodeType":"102","messageId":"103","endLine":32,"endColumn":16},{"ruleId":"100","severity":1,"message":"128","line":1,"column":32,"nodeType":"102","messageId":"103","endLine":1,"endColumn":41},{"ruleId":"100","severity":1,"message":"129","line":2,"column":8,"nodeType":"102","messageId":"103","endLine":2,"endColumn":16},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"no-unused-vars","'ProductViewer' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'ProductContext' is defined but never used.","no-use-before-define","'itemList' was used before it was defined.","usedBeforeDefined","'preferences' is assigned a value but never used.","no-undef","'optionsEntries' is not defined.","undef","'prefEntries' is not defined.","'useState' is defined but never used.","'EditItemSpan' is assigned a value but never used.","'OrderForm' is assigned a value but never used.","'api' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array. Outer scope values like 'axios' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["132"],"array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useEffect' is defined but never used.","'products' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},"Update the dependencies array to be: [dispatch, itemList]",{"range":"135","text":"136"},[857,874],"[dispatch, itemList]"]